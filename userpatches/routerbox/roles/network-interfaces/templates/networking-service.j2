#!/bin/sh -e
## Monolithic networking-service service script. Meant to be used
## as the ExecStart script of the systemd networking-service.service.
##
## Monolithic in the sense that the ifup-/-down commands,
## /etc/network/interfaces configuration file
## and corresponding ifup@ services to start up individual interfaces
## are not supported. The whole network is started and stopped
## in this script. Reason: Didn't want to bother mapping
## all the switch configuration to /etc/network/interfaces properly.
##
## See bridge-utils-interfaces(8) for how to do the latter instead.

if [ -n "$DEBUG" ]; then
    set -x
fi

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

[ -x /sbin/ifup ] || exit 0

. /lib/lsb/init-functions

spoofprotect_rp_filter() {
    [ -e /proc/sys/net/ipv4/conf/all/rp_filter ] || return 1
    RC=0
    for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
    echo 1 > $f || RC=1
    done
    return $RC
}

spoofprotect() {
    log_action_begin_msg "Setting up IP spoofing protection"
    if spoofprotect_rp_filter; then
    log_action_end_msg 0 "rp_filter"
    else
    log_action_end_msg 1
    fi
}

ip_forward() {
    log_action_begin_msg "Enabling packet forwarding"
    if echo 1 > /proc/sys/net/ipv4/ip_forward; then
        log_action_end_msg 0
    else
    log_action_end_msg 1
    fi
}

syncookies() {
    log_action_begin_msg "Enabling TCP SYN cookies"
    if echo 1 > /proc/sys/net/ipv4/tcp_syncookies; then
        log_action_end_msg 0
    else
    log_action_end_msg 1
    fi
}

doopt() {
    optname=$1
    default=$2
    opt=`grep "^$optname=" /etc/network/options || true`
    if [ -z "$opt" ]; then
    opt="$optname=$default"
    fi
    optval=${opt#$optname=}
    if [ "$optval" = "yes" ]; then
    eval $optname
    fi
}

process_options() {
    [ -e /etc/network/options ] || return 0
    log_warning_msg "/etc/network/options is deprecated."
    doopt spoofprotect yes
    doopt syncookies no
}

case "$1" in

start)
    if ip link show physical_switch >/dev/null 2>&1; then
        exit 0;
    fi

    process_options
    log_action_begin_msg "Configuring network interfaces"

    ip_forward

    {% for sw_iface, vlans in physical_switch_vlans.items() %}

    brctl addbr physical_switch_{{sw_iface}}
    
      {% for vlan in vlans %}

    ip link add link {{sw_iface}} name {{vlan.ifname}} type vlan id {{vlan.vid}}
      
        {% for port in vlan.ports %}

    brctl addif physical_switch_{{sw_iface}} {{port.name}}
        
    bridge vlan del vid 1 dev {{port.name}}
    bridge vlan add vid {{vlan.vid}} dev {{port.name}} pvid {% if not(port.tagged | default(false)) %}untagged{% endif %}

    ip link set {{port.name}} up
    
        {% endfor %}

    ip link set {{vlan.ifname}} up
        
      {% endfor %}
    {% endfor %}


    ## setup software switch for the local LAN

    {% for bridge in bridges %}

    brctl addbr {{bridge.name}}
      {% for member in bridge.members %}
    
    brctl addif {{bridge.name}} {{member}}

      {% endfor %}

    ip addr add {{bridge.ip}}/24 dev {{bridge.name}}
    ip link set {{bridge.name}} up

      {% if bridge.ipv6_mtu is defined %}
    echo {{bridge.ipv6_mtu}} >/proc/sys/net/ipv6/conf/{{bridge.name}}/mtu
      {% endif %}

    {% endfor %}
    
    # with newer kernels, adding wlan ifaces in STA mode isn't supported anymore.
    #  hostapd is told about the bridge device and will add the wlan iface to it
    # brctl addif {{lanif_name}} wlan0

    log_action_end_msg $?

    ;;


stop)
    if sed -n 's/^[^ ]* \([^ ]*\) \([^ ]*\) .*$/\2/p' /proc/mounts |
        grep -qE '^(nfs[1234]?|smbfs|ncp|ncpfs|coda|cifs)$'; then
        log_warning_msg "not deconfiguring network interfaces: network shares still mounted."
        exit 1
    fi

    log_action_begin_msg "Deconfiguring network interfaces"

    {% for bridge in bridges %}

    ip addr flush dev {{bridge.name}}

      {% for member in bridge.members %}
    
    brctl delif {{bridge.name}} {{member}}

      {% endfor %}

    ip link set {{bridge.name}} down
    brctl delbr {{bridge.name}}
      
    {% endfor %}

    

    {% for sw_iface, vlans in physical_switch_vlans.items() %}
      {% for vlan in vlans %}

    ip link delete link dev {{vlan.ifname}}
      
        {% for port in vlan.ports %}

    ip link set {{port.name}} down
    
        {% endfor %}

      {% endfor %}

    brctl delbr physical_switch_{{sw_iface}}
      
    {% endfor %}
    
    #ifupdown lo down
    ;;


reload)
    $0 stop
    sleep 1
    $0 start

    ;;

*)
    echo "Usage: $0 {start|stop|reload}. But preferably, use this script via systemd (unit 'network.service')"
    exit 1
    ;;
esac

exit 0

