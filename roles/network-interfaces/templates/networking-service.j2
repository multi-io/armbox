#!/bin/sh -e
## Monolithic networking-service service script. Meant to be used
## as the ExecStart script of the systemd networking-service.service.
##
## Monolithic in the sense that the ifup-/-down commands,
## /etc/network/interfaces configuration file
## and corresponding ifup@ services to start up individual interfaces
## are not supported. The whole network is started and stopped
## in this script. Reason: Didn't want to bother mapping
## all the switch configuration to /etc/network/interfaces properly.
##
## See bridge-utils-interfaces(8) for how to do the latter instead.

if [ -n "$DEBUG" ]; then
    set -x
fi

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

[ -x /sbin/ifup ] || exit 0

. /lib/lsb/init-functions

spoofprotect_rp_filter() {
    [ -e /proc/sys/net/ipv4/conf/all/rp_filter ] || return 1
    RC=0
    for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
    echo 1 > $f || RC=1
    done
    return $RC
}

spoofprotect() {
    log_action_begin_msg "Setting up IP spoofing protection"
    if spoofprotect_rp_filter; then
    log_action_end_msg 0 "rp_filter"
    else
    log_action_end_msg 1
    fi
}

ip_forward() {
    log_action_begin_msg "Enabling packet forwarding"
    if echo 1 > /proc/sys/net/ipv4/ip_forward; then
        log_action_end_msg 0
    else
    log_action_end_msg 1
    fi
}

syncookies() {
    log_action_begin_msg "Enabling TCP SYN cookies"
    if echo 1 > /proc/sys/net/ipv4/tcp_syncookies; then
        log_action_end_msg 0
    else
    log_action_end_msg 1
    fi
}

doopt() {
    optname=$1
    default=$2
    opt=`grep "^$optname=" /etc/network/options || true`
    if [ -z "$opt" ]; then
    opt="$optname=$default"
    fi
    optval=${opt#$optname=}
    if [ "$optval" = "yes" ]; then
    eval $optname
    fi
}

process_options() {
    [ -e /etc/network/options ] || return 0
    log_warning_msg "/etc/network/options is deprecated."
    doopt spoofprotect yes
    doopt syncookies no
}

case "$1" in

start)
    if ip link show physical_switch >/dev/null 2>&1; then
        exit 0;
    fi

    process_options
    log_action_begin_msg "Configuring network interfaces"

    ip_forward

    ## physical switch configuration. Relies on DSA-capable driver for the switch,
    ## which means switch configuration works via the standard br* tools

    # physical switch eth0, consisting of 5 physical ports lan1...lan4, wan
    # despite the "lan" vs. "wan" naming, they're all equivalent after bootup and
    # operate as a switche initially (until the kernel boots and disables this).
    # we'll use "wan" for the outgoing (WAN) port and lan1..4 for the LAN-facing ports
    brctl addbr physical_switch
    brctl addif physical_switch lan1
    brctl addif physical_switch lan2
    brctl addif physical_switch lan3
    brctl addif physical_switch lan4
    brctl addif physical_switch wan

    # VLAN 1 = LAN
    # VLAN 2 = WAN
    # VLAN 3 = management access
    #
    # 1 is the default vid (VLAN ID), all interfaces belong to it initially
    # (see "bridge vlan show" after a clean reboot and brctl addbr+addif sequence).
    # Hence only vid 2 and 3 must be added to an interface explicitly. vid 1 must be REMOVED explicitly.
    # So we use vid 1 for the VLAN of all the local ports (i.e. all but the "wan" and "lan4" port),
    # vid 2 for the VLAN of the wan port, vid 3 for the management port (i.e the "lan4" port -- physically opposite of the wan port).
    ip link add link eth0 name eth0.1 type vlan id 1
    ip link add link eth0 name eth0.2 type vlan id 2
    ip link add link eth0 name eth0.3 type vlan id 3

    bridge vlan add vid 2 dev wan pvid untagged
    bridge vlan del vid 1 dev wan

    bridge vlan add vid 3 dev lan4 pvid untagged
    bridge vlan del vid 1 dev lan4

    ip link set wan up
    ip link set lan1 up
    ip link set lan2 up
    ip link set lan3 up
    ip link set lan4 up

    ip link set eth0.2 up
    ip link set eth0.1 up

    ## setup software switch for the local LAN

    brctl addbr {{lanif_name}}
    brctl addif {{lanif_name}} eth0.1
    # with newer kernels, adding wlan ifaces in STA mode isn't supported anymore.
    #  hostapd is told about the bridge device and will add the wlan iface to it
    # brctl addif {{lanif_name}} wlan0

    # LAN IP
    ip addr add {{lan_prefix}}.1/24 dev {{lanif_name}}
    ip link set {{lanif_name}} up
    #ip -6 link set {{lanif_name}} mtu 1400  # for better IPv6 compatibility...  # distributed via radvd.conf to LAN hosts
    echo 1400 >/proc/sys/net/ipv6/conf/{{lanif_name}}/mtu  # for IPv6 only (does this really work?)

    # management IP
    ip addr add {{management_ip}}/24 dev eth0.3
    ip link set eth0.3 up

    log_action_end_msg $?

    ;;


stop)
    if sed -n 's/^[^ ]* \([^ ]*\) \([^ ]*\) .*$/\2/p' /proc/mounts |
        grep -qE '^(nfs[1234]?|smbfs|ncp|ncpfs|coda|cifs)$'; then
        log_warning_msg "not deconfiguring network interfaces: network shares still mounted."
        exit 1
    fi

    log_action_begin_msg "Deconfiguring network interfaces"
    ip addr flush dev {{lanif_name}}
    brctl delif {{lanif_name}} eth0.1
#   brctl delif {{lanif_name}} wlan0
    ip link set {{lanif_name}} down
    brctl delbr {{lanif_name}}

    ip link delete link dev eth0.1
    ip link delete link dev eth0.2
    ip link delete link dev eth0.3
    brctl delbr physical_switch
    ip link set wan down
    ip link set lan1 down
    ip link set lan2 down
    ip link set lan3 down
    ip link set lan4 down

    #ifupdown lo down
    ;;


reload)
    $0 stop
    sleep 1
    $0 start

    ;;

*)
    echo "Usage: $0 {start|stop|reload}. But preferably, use this script via systemd (unit 'network.service')"
    exit 1
    ;;
esac

exit 0

