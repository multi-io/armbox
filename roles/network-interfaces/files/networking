#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          networking
# Required-Start:    mountvirtfs ifupdown $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO

# my alternative init.d/networking script that does not
# use ifup(8)/ifdown(8), doing all the ifconfig stuff manually
# instead, but still runs Debian's /etc/network/if-*.d/ scripts.

# Introduced primarily to set up an ethernet bridge using brctl,
# but see bridge-utils-interfaces(8) for how to do that in
# Debian's /etc/network/interfaces file as well.


PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

[ -x /sbin/ifup ] || exit 0

. /lib/lsb/init-functions

spoofprotect_rp_filter() {
    [ -e /proc/sys/net/ipv4/conf/all/rp_filter ] || return 1
    RC=0
    for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
	echo 1 > $f || RC=1
    done
    return $RC
}

spoofprotect() {
    log_action_begin_msg "Setting up IP spoofing protection"
    if spoofprotect_rp_filter; then
	log_action_end_msg 0 "rp_filter"
    else
	log_action_end_msg 1
    fi
}

ip_forward() {
    log_action_begin_msg "Enabling packet forwarding"
    if echo 1 > /proc/sys/net/ipv4/ip_forward; then
        log_action_end_msg 0
    else
	log_action_end_msg 1
    fi
}

syncookies() {
    log_action_begin_msg "Enabling TCP SYN cookies"
    if echo 1 > /proc/sys/net/ipv4/tcp_syncookies; then
        log_action_end_msg 0
    else
	log_action_end_msg 1
    fi
}

doopt() {
    optname=$1
    default=$2
    opt=`grep "^$optname=" /etc/network/options || true`
    if [ -z "$opt" ]; then
	opt="$optname=$default"
    fi
    optval=${opt#$optname=}
    if [ "$optval" = "yes" ]; then
	eval $optname
    fi
}

process_options() {
    [ -e /etc/network/options ] || return 0
    log_warning_msg "/etc/network/options is deprecated."
    doopt spoofprotect yes
    doopt syncookies no
    doopt ip_forward no
}

ifupdown() {
    if="$1"
     shift
    cmd="$1"     # up | down
    shift
    export IFACE=$if
    if [ "$cmd" = up ]; then
	export MODE=start
	export PHASE=pre-up
	run-parts /etc/network/if-pre-up.d

	ifconfig $if "$@" $cmd

	export PHASE=post-up
	run-parts /etc/network/if-up.d
    else
        export MODE=stop
	export PHASE=pre-down
	run-parts /etc/network/if-down.d

	ifconfig $if $cmd

	export PHASE=post-down
	run-parts /etc/network/if-post-down.d
    fi
}

case "$1" in
start)
	process_options
	log_action_begin_msg "Configuring network interfaces"

	ifupdown lo up 127.0.0.1

	modprobe ath5k
	ifconfig eth0 0.0.0.0
	ifconfig wlan0 0.0.0.0
	brctl addbr lanif
	brctl addif lanif eth0
# with newer kernels, adding wlan ifaces in STA mode isn't supported anymore.
#  hostapd is told about the bridge device and will add the wlan iface to it
#	brctl addif lanif wlan0

	ifupdown lanif up 192.168.142.1 netmask 255.255.255.0
	#ip -6 link set lanif mtu 1400  # for better IPv6 compatibility...  # distributed via radvd.conf to LAN hosts
	echo 1400 >/proc/sys/net/ipv6/conf/lanif/mtu  # for IPv6 only (does this really work?)

        log_action_end_msg $?

	;;

stop)
	if sed -n 's/^[^ ]* \([^ ]*\) \([^ ]*\) .*$/\2/p' /proc/mounts | 
		grep -qE '^(nfs[1234]?|smbfs|ncp|ncpfs|coda|cifs)$'; then
	    log_warning_msg "not deconfiguring network interfaces: network shares still mounted."
	    exit 0
	fi

	log_action_begin_msg "Deconfiguring network interfaces"
	brctl delif lanif eth0
	brctl delif lanif eth1
#	brctl delif lanif wlan0
	ifupdown lanif down
	brctl delbr lanif
	ifupdown lo down
	;;

force-reload|restart)
	process_options
	log_action_begin_msg "Reconfiguring network interfaces"
	./networking stop
	./networking start
	log_action_end_msg $?
	;;

*)
	echo "Usage: /etc/init.d/networking {start|stop|restart|force-reload}"
	exit 1
	;;
esac

exit 0

